const lettersRegex=/[xXnNzZ]/g,numbersRegex=/[0-9]/g,bracketsRegex=/\[.*?\]/g,charactersRegex=/[*#+]/g,asteriskXZNPattern={X:"[0-9]",Z:"[1-9]",N:"[2-9]"},validateNumber=(a,b)=>{if(!a)throw new Error("AsteriskPattern is missing");if(!b)throw new Error("Number for validation is missing");"number"==typeof b&&(b=b.toString());const c=a.replace(/\[.*?\]/,"@");let d,e=[];do d=lettersRegex.exec(c),d&&e.push({pattern:d[0],index:d.index-1,validate:(a,b,c)=>!!a.match(new RegExp(`^.{${b}}${asteriskXZNPattern[c]}`))});while(d);let f;do f=numbersRegex.exec(c),f&&e.push({pattern:f[0],index:f.index-1,validate:(a,b,c)=>parseInt(a[b])===parseInt(c)});while(f);let g;do g=bracketsRegex.exec(a),g&&e.push({pattern:g[0],index:g.index-1,validate:(a,b,c)=>!!a.match(new RegExp(`^.{${b}}${c}`))});while(g);let h;do h=charactersRegex.exec(c),h&&e.push({pattern:h[0],index:h.index-1,validate:(a,b,c)=>a[b]===c});while(h);const i=c.lastIndexOf(".");0<i&&i===c.length-1&&e.push({pattern:".",index:i-1,validate:a=>a.length>=i});const j=c.lastIndexOf("!");return 0<j&&j===c.length-1&&e.push({pattern:"!",index:j-1,validate:a=>a.length>=j-1}),0>i&&0>j&&e.push({pattern:c.length-1,index:0,validate:a=>a.length===c.length-1}),e.sort((c,a)=>c.index-a.index).every(({pattern:a,index:c,validate:d})=>d(b,c,a))};exports.validateNumber=validateNumber;const modifyNumber=(a,{deleteFromStart:d=0,deleteFromEnd:e=0,prefix:b,suffix:c})=>`${b}${a.substring(parseInt(d),a.length-e)}${c}`;exports.parseNumber=(a,b)=>{try{if(!a)throw new Error("Number for validation is missing");if(!b)throw new Error("Information about asterisk pattern and number modification are missing");return Array.isArray(b)||(b=[b]),b.some(({pattern:b,...c})=>{const d=validateNumber(b,a);return d&&(a=modifyNumber(a,{...c})),d}),a}catch(a){throw a}};